/* Given an integer array nums, handle multiple queries of the following type:

Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
 

Example 1:

Input
["NumArray", "sumRange", "sumRange", "sumRange"]
[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
Output
[null, 1, -1, -3]

Explanation
NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1
numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1
numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3 */

CODE : 
+---------------------------------------------------------------+
class NumArray {
    private int[] prefix;

    public NumArray(int[] nums) {
        int n = nums.length;
        prefix = new int[n+1];
        for(int i=0;i<n;i++){
            prefix[i+1] = prefix[i] + nums[i];
        }
    }   
    public int sumRange(int left, int right) {
        // sum of nums[left..right] = prefix[right+1] - prefix[left]
        return prefix[right + 1] - prefix[left];
    }
}
+---------------------------------------------------------------+

Dry run example

Let nums = {-2, 0, 3, -5, 2, -1}

Compute prefix:

prefix[0] = 0

prefix[1] = 0 + (-2) = -2

prefix[2] = -2 + 0 = -2

prefix[3] = -2 + 3 = 1

prefix[4] = 1 + (-5) = -4

prefix[5] = -4 + 2 = -2

prefix[6] = -2 + (-1) = -3

So prefix = [0, -2, -2, 1, -4, -2, -3]

Queries:

sumRange(0, 2) = prefix[3] - prefix[0] = 1 - 0 = 1

sumRange(2, 5) = prefix[6] - prefix[2] = -3 - (-2) = -1

sumRange(0, 5) = prefix[6] - prefix[0] = -3 - 0 = -3