/* Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2 */

// CODE :
// +----------------------------------------------------------------+
import java.util.*;

class Solution {
    public int subarraySum(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);  // prefix sum 0 appears once (base case)
        
        int count = 0;
        int prefixSum = 0;
        
        for (int num : nums) {
            prefixSum += num;
            
            // check if prefixSum - k exists
            if (map.containsKey(prefixSum - k)) {
                count += map.get(prefixSum - k);
            }
            
            // update frequency of current prefix sum
            map.put(prefixSum, map.getOrDefault(prefixSum, 0) + 1);
        }
        
        return count;
    }
}
// +----------------------------------------------------------------+

/* Example dry run

nums = [1, 2, 3], k = 3

Start: map = {0:1}, prefixSum=0, count=0

num=1 → prefixSum=1
Need 1-3 = -2 (not in map).
Add prefixSum=1 → map={0:1, 1:1}.

num=2 → prefixSum=3
Need 3-3 = 0 (yes, map[0]=1).
count += 1 → count=1.
Add prefixSum=3 → map={0:1, 1:1, 3:1}.

num=3 → prefixSum=6
Need 6-3=3 (yes, map[3]=1).
count += 1 → count=2.
Add prefixSum=6 → map={0:1, 1:1, 3:1, 6:1}.

Answer = 2 (subarrays [1,2], [3]). */